/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WarpPlacer.java
 *
 * Created on Jun 17, 2012, 1:30:58 PM
 */

package LevelEditor;

/**
 *
 * @author Jim
 */

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JTextField;

public class WarpPlacer extends javax.swing.JPanel
{
    private Editor editor;
    private JComboBox room;
    private JTextField toX;
    private JTextField toY;
    private JCheckBox nextLv;
    private JButton save;

    public Warp warp = null;
    
    /** Creates new form WarpPlacer */
    public WarpPlacer(Editor e)
    {
        initComponents();
        editor = e;
        this.setLayout(null);
        this.setSize(400, 300);

        JLabel l1 = new JLabel("Warps");
        this.add(l1);
        l1.setBounds(0, 0, 100, 50);

        Integer[] iRoom = new Integer[editor.currLevel.getNumRooms()];

        for (int i = 0; i < iRoom.length; i++)
        {
            iRoom[i] = Integer.valueOf(i);
        }

        if (iRoom.length == 0)
        {
            iRoom = new Integer[1];
            iRoom[0] = Integer.valueOf(0);
        }

        JLabel l2 = new JLabel("Warp to Room #");
        this.add(l2);
        l2.setBounds(0, 50, 100, 50);

        room = new JComboBox(iRoom);
        this.add(room);
        room.setBounds(100, 50, 100, 50);

        JLabel l3 = new JLabel("Go to X = ");
        JLabel l4 = new JLabel("Go to Y = ");
        this.add(l3);
        this.add(l4);
        l3.setBounds(0, 120, 70, 30);
        l4.setBounds(0, 150, 70, 30);

        toX = new JTextField("1");
        toY = new JTextField("1");
        this.add(toX);
        this.add(toY);
        toX.setBounds(70, 120, 50, 30);
        toY.setBounds(70, 150, 50, 30);

        nextLv = new JCheckBox("Go to next level?");
        this.add(nextLv);
        nextLv.setBounds(0, 190, 150, 50);

        save = new JButton("Update Warp...");
        this.add(save);
        save.setBounds(0, 240, 150, 50);

        save.addActionListener(new ActionListener()
        {

            public void actionPerformed(ActionEvent e)
            {
                save();
            }

        });

        nextLv.addActionListener(new ActionListener()
        {

            public void actionPerformed(ActionEvent e)
            {
                makeChanges();
            }

        });

        room.addActionListener(new ActionListener()
        {

            public void actionPerformed(ActionEvent e)
            {
                makeChanges();
            }

        });

    }

    private void makeChanges()
    {
        editor.selectedPayload.gotoRoom = room.getSelectedIndex();
        editor.selectedPayload.nextLev = nextLv.isSelected();
    }

    private void save()
    {
        makeChanges();
        
        try
        {
            editor.selectedPayload.toX = Integer.parseInt(toX.getText());
            editor.selectedPayload.toY = Integer.parseInt(toY.getText());
        }
        catch (Exception e)
        {
            editor.selectedPayload.toX = 1;
            editor.selectedPayload.toY = 1;
        }

        editor.updateWarp(warp);
    }

    public void update()
    {
        if (warp != null)
        {
            toX.setText("" + warp.getPlayerWarpX()/40);
            toY.setText("" + warp.getPlayerWarpY()/40);

            try
            {
                room.setSelectedIndex(warp.getLevelX());
            }
            catch(Exception e)
            {

            }

            nextLv.setSelected(warp.isNextLevelWarp());

        }
        else
        {
            toX.setText("1");
            toY.setText("1");
            room.setSelectedIndex(0);
            nextLv.setSelected(false);

            editor.selectedPayload.toX = 1;
            editor.selectedPayload.toY = 1;
            editor.selectedPayload.gotoRoom = 0;
            editor.selectedPayload.nextLev = false;
        }
    }

    public void updateWarpRooms()
    {
        System.out.println("WarpPlacer::Updating all rooms");

        Integer[] iRoom = new Integer[editor.currLevel.getNumRooms()];

        for (int i = 0; i < iRoom.length; i++)
        {
            iRoom[i] = Integer.valueOf(i);
        }

        room.removeAllItems();

        for(int i = 0; i < iRoom.length; i++)
        {
            room.addItem(iRoom[i]);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}

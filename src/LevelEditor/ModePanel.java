/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ModePanel.java
 *
 * Created on Jun 3, 2012, 7:43:21 PM
 */

package LevelEditor;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JComboBox;
import javax.swing.JLabel;

/**
 *
 * @author Jim
 */
public class ModePanel extends javax.swing.JPanel
{
    private JComboBox modeBox;
    private JComboBox type;
    private JLabel mapXY;
    private MapPanel mPanel;
    private Editor editor;

    /** Creates new form ModePanel */
    public ModePanel(MapPanel m, Editor ed)
    {
        initComponents();
        this.setLayout(null);
        this.setSize(400, 100);
        this.setVisible(true);

        mPanel = m;
        editor = ed;
        
        String[] types = new String[Mode.values().length];

        for(int i = 0; i < Mode.values().length; i++)
        {
            types[i] = Mode.values()[i].toString();
        }

        type = new JComboBox(types);

        mapXY = new JLabel("X = 0 Y = 0");
        this.add(mapXY);

        this.add(type);

        String[] sModes = new String[SelectionMode.values().length];

        for(int i = 0; i < SelectionMode.values().length; i++)
        {
            sModes[i] = SelectionMode.values()[i].toString();
        }

        modeBox = new JComboBox(sModes);
        this.add(modeBox);

        modeBox.setBounds(0, 50, 150, 50);
        type.setBounds(170, 50, 150, 50);
        mapXY.setBounds(0, 0, 100, 50);

        type.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                updateSelectedPayload();
                //Change ContentPanel's card
                updateMode();
                
            }
        });

        modeBox.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                updateSelectedPayload();
            }
        });

    }

    private void updateSelectedPayload()
    {
        editor.selectedPayload.selectionMode = SelectionMode.values()[modeBox.getSelectedIndex()];
        editor.selectedPayload.mode = Mode.values()[type.getSelectedIndex()];

        System.out.println(editor.selectedPayload.selectionMode.toString());
        System.out.println(editor.selectedPayload.mode.toString());

        if (editor.selectedPayload.mode == Mode.NPC)
        {
            editor.clearNPCPathText();
            
            if (editor.selectedPayload.selectionMode == SelectionMode.EDIT)
            {
                editor.enableNPCEditing();
            }
            else
            {
                editor.disableNPCEditing();
            }
        }

        if (editor.selectedPayload.mode == Mode.DOOR)
        {
            editor.resetDoor();
        }

        if (editor.selectedPayload.mode == Mode.WARP)
        {
            editor.resetWarp();
        }

        if (editor.selectedPayload.mode == Mode.OBJECTIVE)
        {
            editor.resetObjective();
        }

        if (editor.selectedPayload.mode == Mode.SPAWN)
        {
            editor.resetSpawn();
        }

        if (editor.selectedPayload.mode == Mode.CAMERA)
        {
            editor.resetCamera();
        }

        editor.notEditing();
    }

    public void clear()
    {
        if (editor.selectedPayload.mode == Mode.NPC)
        {
            editor.clearNPCPathText();

            if (editor.selectedPayload.selectionMode == SelectionMode.EDIT)
            {
                editor.enableNPCEditing();
            }
            else
            {
                editor.disableNPCEditing();
            }
        }

        if (editor.selectedPayload.mode == Mode.DOOR)
        {
            editor.resetDoor();
        }

        if (editor.selectedPayload.mode == Mode.WARP)
        {
            editor.resetWarp();
        }

        if (editor.selectedPayload.mode == Mode.OBJECTIVE)
        {
            editor.resetObjective();
        }

        if (editor.selectedPayload.mode == Mode.SPAWN)
        {
            editor.resetSpawn();
        }

        if (editor.selectedPayload.mode == Mode.CAMERA)
        {
            editor.resetCamera();
        }
    }

    private void updateMode()
    {
        this.editor.changeMode(type.getSelectedItem().toString());
    }

    public void updateMapXY()
    {
        mapXY.setText("X = " + mPanel.mouseX + " Y = " + mPanel.mouseY);
        mapXY.repaint();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
